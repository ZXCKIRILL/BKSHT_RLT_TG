# pylint: disable=missing-module-docstring,missing-class-docstring,missing-function-docstring
"""Buckshot Roulette Telegram Bot"""
import logging
import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)
logger = logging.getLogger(__name__)

TOKEN = "7504881712:AAHe7X6SMzuZyuTkVpP3zaNgblEZ-B8dN6U"

bot = Bot(token=TOKEN)
dp = Dispatcher()

class GameState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã"""
    gameplay = State()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "\n–ì–æ—Ç–æ–≤?\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "- –í –æ–±–æ–π–º–µ –±–æ–µ–≤–æ–π –∏–ª–∏ —Ö–æ–ª–æ—Å—Ç–æ–π\n"
        "- –î—É–º–∞—é, –∏–≥—Ä–∞ —Ç–µ–±–µ —É–∂–µ —è—Å–Ω–∞.\n"
        "- –£ –∫–∞–∂–¥–æ–≥–æ –ø–æ 2 –∂–∏–∑–Ω–∏\n"
        "- –ö—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥—ã—à–∏—Ç - –∑–∞–±–∏—Ä–∞–µ—Ç –¥–µ–Ω—å–≥–∏. –£–¥–∞—á–∏.\n"
        "- /startgame"
    )

@dp.message(Command("startgame"))
async def cmd_start_game(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
    await start_new_round(message, state)

async def start_new_round(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —Å –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –ø–∞—Ç—Ä–æ–Ω–æ–≤"""
    count = random.randint(2, 6)
    live = count // 2
    blank = count - live
    bullets = [True] * live + [False] * blank
    random.shuffle(bullets)
    
    await state.update_data(
        bullets=bullets,
        current_index=0,
        player_hp=2,
        dealer_hp=2,
        current_turn=random.choice(["player", "dealer"]),
        live_count=live,
        blank_count=blank
    )
    
    data = await state.get_data()
    await message.answer(
        f"{count} –ø–∞—Ç—Ä–æ–Ω–æ–≤\n"
        f"–ë–æ–µ–≤—ã—Ö: {data['live_count']}\n"
        f"–•–æ–ª–æ—Å—Ç—ã—Ö: {data['blank_count']}\n"
        f"–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç {data['current_turn'].capitalize()}!\n",
        reply_markup=get_game_keyboard()
    )
    await state.set_state(GameState.gameplay)
    await handle_turn(message, state)

def get_game_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    buttons = [
        KeyboardButton(text="–†–ò–°–ö–ù–£–¢–¨"),
        KeyboardButton(text="–£–ë–ò–¢–¨"),
    ]
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[buttons],
        one_time_keyboard=False
    )

async def handle_turn(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –¥–∏–ª–µ—Ä–∞"""
    data = await state.get_data()
    
    if data["current_turn"] == "dealer":
        await dealer_shot(message, state)
    else:
        await message.answer(
            "–¢–≤–æ–π —á–µ—Ä–µ–¥:",
            reply_markup=get_game_keyboard()
        )

@dp.message(lambda message: message.text in ["–†–ò–°–ö–ù–£–¢–¨", "–£–ë–ò–¢–¨"])
async def handle_shot_buttons(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤—ã—Å—Ç—Ä–µ–ª–∞"""
    current_state = await state.get_state()
    if current_state != GameState.gameplay:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É /startgame")
        return

    data = await state.get_data()
    if data["current_turn"] != "player":
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π —Ö–æ–¥.")
        return

    new_turn_needed = True
    
    while True:
        data = await state.get_data()
        if data["current_index"] >= len(data["bullets"]):
            break
            
        bullet = data["bullets"][data["current_index"]]
        target = "self" if message.text == "–†–ò–°–ö–ù–£–¢–¨" else "dealer"
        
        game_over = await process_bullet(message, state, bullet, target)
        if game_over:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ö–æ–¥–∞
        if not bullet and target == "self":
            await message.answer("–ü–æ–≤–µ–∑–ª–æ. –í —ç—Ç–æ—Ç —Ä–∞–∑.")
            new_turn_needed = False
            # –ê–≤—Ç–æ–≤—ã–±–æ—Ä –¥–ª—è –¥–æ–ø —Ö–æ–¥–∞
            message.text = "–†–ò–°–ö–ù–£–¢–¨"  
        else:
            break
    
    if new_turn_needed:
        await switch_turn(message, state)

async def process_bullet(
    message: types.Message, 
    state: FSMContext, 
    bullet: bool, 
    target: str
) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞"""
    data = await state.get_data()
    new_index = data["current_index"] + 1
    new_data = {**data, "current_index": new_index}
    
    if bullet:
        if target == "self":
            new_data["player_hp"] -= 1
            msg = "üí•"
        else:
            new_data["dealer_hp"] -= 1
            msg = "üí•"
    else:
        msg = "–©–µ–ª—á–æ–∫. –ö —Å—á–∞—Å—Ç—å—é..." if target == "self" \
            else "–©–µ–ª—á–æ–∫. –ó–∞—Ä–∞–∑–∞..."
    
    await state.update_data(**new_data)
    await message.answer(
        f"{msg}\n"
        f"–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å: {new_data['player_hp']}\n"
        f"–î–∏–ª–ª–µ—Ä: {new_data['dealer_hp']}"
    )
    
    return await check_winner(message, state)

async def dealer_shot(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö–æ–¥ –¥–∏–ª–µ—Ä–∞"""
    while True:
        data = await state.get_data()
        if data["current_index"] >= len(data["bullets"]):
            break
            
        bullet = data["bullets"][data["current_index"]]
        target = random.choice(["self", "player"])
        
        new_index = data["current_index"] + 1
        new_data = {**data, "current_index": new_index}
        
        if bullet:
            if target == "self":
                new_data["dealer_hp"] -= 1
                msg = "üí•"
            else:
                new_data["player_hp"] -= 1
                msg = "üí•"
        else:
            msg = f"–©–µ–ª—á–æ–∫ –≤ {target.upper()} ..."
        
        await state.update_data(**new_data)
        await message.answer(
            f"{msg}\n"
            f"–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å: {new_data['player_hp']}\n"
            f"–î–∏–ª–ª–µ—Ä: {new_data['dealer_hp']}"
        )
        
        if await check_winner(message, state):
            return
            
        # –ï—Å–ª–∏ —Ö–æ–ª–æ—Å—Ç–æ–π –≤ —Å–µ–±—è - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
        if not bullet and target == "self":
            await message.answer("–û–Ω —Ö–æ–¥–∏—Ç —Å–Ω–æ–≤–∞...")
            await asyncio.sleep(1)
        else:
            break
    
    await switch_turn(message, state)

async def switch_turn(message: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ö–æ–¥ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–æ–º –∏ –¥–∏–ª–µ—Ä–æ–º"""
    data = await state.get_data()
    new_turn = "dealer" if data["current_turn"] == "player" else "player"
    await state.update_data(current_turn=new_turn)
    await handle_turn(message, state)

async def check_winner(message: types.Message, state: FSMContext) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã"""
    data = await state.get_data()
    
    player_dead = data["player_hp"] <= 0
    dealer_dead = data["dealer_hp"] <= 0
    
    if player_dead:
        await message.answer("–í—ã –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å –≤ —Ç–µ–º–Ω–æ–º –º–µ—Å—Ç–µ. –ü—Ä–µ–¥ –≤–∞–º–∏ –ª–∏—à—å —á–µ—Ä–Ω—ã–µ –≤—Ä–∞—Ç–∞. –ö–æ–Ω–µ—Ü..?", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return True
    if dealer_dead:
        await message.answer("–í—ã –ø–µ—Ä–≤—ã–π –∫—Ç–æ —Å–º–æ–≥. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏. –ö–æ–Ω–µ—Ü.", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–∞—Ç—Ä–æ–Ω–æ–≤
    data = await state.get_data()
    if data["current_index"] >= len(data["bullets"]):
        await message.answer("–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç. –í–∫–∞–ª—ã–≤–∞–µ–º –ø–æ –º–æ—Ä—Ñ–∏–Ω—É, –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º...")
        await start_new_round(message, state)
        return True

    return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())